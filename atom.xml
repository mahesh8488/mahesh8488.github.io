<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mahesh Alwani&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mahesh8488.github.io/"/>
  <updated>2020-01-25T02:33:36.341Z</updated>
  <id>http://mahesh8488.github.io/</id>
  
  <author>
    <name>Mahesh Alwani</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Server to Client messaging using SignalR</title>
    <link href="http://mahesh8488.github.io/2020/01/24/Server-to-Client-messaging-using-SignalR/"/>
    <id>http://mahesh8488.github.io/2020/01/24/Server-to-Client-messaging-using-SignalR/</id>
    <published>2020-01-25T01:38:24.000Z</published>
    <updated>2020-01-25T02:33:36.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Improve-web-performance-using-Server-to-Client-messaging"><a href="#Improve-web-performance-using-Server-to-Client-messaging" class="headerlink" title="Improve web performance using Server to Client messaging"></a>Improve web performance using Server to Client messaging</h1><p>We came across multiple instances in our project where we used to poll APIs to get updated data to display on web pages. There are scenarios where an API call triggers a backend process which may take more than 60 seconds to complete. Most optimal way to handle such scenarios is to ask server to send a notification when there is a change that may affect the displayed data on clients.</p><p><a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-3.1&amp;tabs=visual-studio" target="_blank" rel="noopener">Asp.net SignalR</a> provides great support for achieving this. SignalR can be easily setup to enable communications within the same site.</p><p>We wanted a way where a external service could communicate to our websites clients when there is an update.</p><p>Here is our solution:</p><p><img src="https://github.com/mahesh8488/static-warehouse/blob/master/images/serverToClientUsingAspNetSignalR.PNG?raw=truehttps://github.com/mahesh8488/static-warehouse/blob/master/images/serverToClientUsingAspNetSignalR.PNG?raw=true" alt="Server to client communication using micro service"></p><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>Web clients will subscribe for messages unique to their requirements.<br>We used a unique identifier as “Topic” name. <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-queues-topics-subscriptions#topics-and-subscriptions" target="_blank" rel="noopener">Topic</a> is a service bus concept which supports on to many communication in a publish/subscribe pattern.</p><p>Below is the controller which will help subscribe/unsubscribe “TOPIC” from client. Since it will communicate directly to SignalR, we have to refer the signalR client library in Web project. (it could have better if I had moved this to Communications service.)</p><p>To subscribe to a topic invoke subscribe method with a specific topic string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">topicHubModule.factory(<span class="string">"messagingHub"</span>, [<span class="string">"utils"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">utils</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        start: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">signalRUrl</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.connection === <span class="literal">null</span> || <span class="keyword">this</span>.connection === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.activeSubscriptions = [];</span><br><span class="line">                <span class="keyword">this</span>.connection = <span class="keyword">new</span> signalR.HubConnectionBuilder()</span><br><span class="line">                    .withUrl(signalRUrl)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> <span class="keyword">this</span>.connection.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        stop: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.connection !== <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">await</span> <span class="keyword">this</span>.connection.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        subscribe: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">topic, callback, connectionUrl</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.start(connectionUrl);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.activeSubscriptions === <span class="literal">null</span> || <span class="keyword">this</span>.activeSubscriptions === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.activeSubscriptions = [];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.connection.invoke(<span class="string">"subscribe"</span>, topic);</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.connection.on(topic, callback);</span><br><span class="line">            <span class="keyword">this</span>.activeSubscriptions.push(&#123; topic, callback &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        unsubscribe: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">topic, callback, connectionUrl</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.start(connectionUrl);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.connection.invoke(<span class="string">"unsubscribe"</span>, topic);</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">this</span>.connection.off(topic, callback);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.activeSubscriptions = utils.RemoveItemFromArray(<span class="keyword">this</span>.activeSubscriptions, &#123; topic, callback &#125;, (item1, item2) =&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> item1.topic === item2.topic &amp;&amp; item2.callback === item2.callback;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><h3 id="Communications-service"><a href="#Communications-service" class="headerlink" title="Communications service"></a>Communications service</h3><p>This is a micro service which acts as a wrapper for messaging using SignalR. </p><p>API that need to be implemented:</p><p>This will enable external services to broadcast messages to all clients listening to topic.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost(<span class="string">"&#123;message&#125;"</span>)]</span><br><span class="line">public <span class="keyword">async</span> Task&lt;string&gt; SendMessageToSignalR(string topic, [FromBody] Message message)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">await</span> _hubContext.Clients.GroupExcept(topic, <span class="keyword">new</span> List&lt;string&gt;()).SendAsync(topic, message.body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="External-service"><a href="#External-service" class="headerlink" title="External service"></a>External service</h3><p>This service will connect to the Communications service and invoke SendMessageToSignalR API with the TOPIC name and message. SignalR brodcasts message to every client which is listening to the TOPIC.</p><p>Feel free to comment and suggest better solutions or improve this solution !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Improve-web-performance-using-Server-to-Client-messaging&quot;&gt;&lt;a href=&quot;#Improve-web-performance-using-Server-to-Client-messaging&quot; class=
      
    
    </summary>
    
    
      <category term="server-to-client messaging signalR web performance TOPIC" scheme="http://mahesh8488.github.io/tags/server-to-client-messaging-signalR-web-performance-TOPIC/"/>
    
  </entry>
  
  <entry>
    <title>Resolving Azure Multi-factor authentication error for react-native-azure-ad library</title>
    <link href="http://mahesh8488.github.io/2018/08/01/Resolving-Azure-Multi-factor-authentication-error-for-react-native-azure-ad-library/"/>
    <id>http://mahesh8488.github.io/2018/08/01/Resolving-Azure-Multi-factor-authentication-error-for-react-native-azure-ad-library/</id>
    <published>2018-08-01T20:38:24.000Z</published>
    <updated>2020-01-25T02:27:29.956Z</updated>
    
    <content type="html"><![CDATA[<p>react-native-azure-ad is a library which makes azure active directory authentication simpler in React-Native apps. I recently found that if user has Multi-factor authentication enabled</p><p>A typical Azure auth will involve user signing in which will return a authorization_code.<br>This code is then used to fetch the access_token. However, when user has MFA (Multi-factor authentication) enabled, this call fails throwing the error <strong><em>AADSTS50079: The user is required to use multi-factor authentication.</em></strong></p><p><img src="https://github.com/mahesh8488/static-warehouse/blob/master/images/Multi-factor%20authentication%20error.png?raw=true" alt="Multi-factor auth issue"></p><h2 id="Attempt-to-fix-1"><a href="#Attempt-to-fix-1" class="headerlink" title="Attempt to fix #1"></a>Attempt to fix #1</h2><p>Typically, “/token” POST API returns 3 important components: <strong><em>id_token, access_token, refresh_token</em></strong>.</p><p>While searching around for solutions, I found that we need to catch this auth error and then fetch token using the “/authorize” endpoint but with query parameter <strong><em>response_type=token</em></strong>.<br>This works, but the problem is it only returns <strong><em>access_token</em></strong><br>To fetch “id_token” I made another call to same api but with ***response_type=id_token”.<br>But, react-native-azure-ad also uses “refresh_token” which is cannot be fetched using any GET APIs. So this solution didn’t work for me.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The minimal-solution is to catch the authentication error and fetch the token using GET API (/authorize).<br>Once token is refreshed, the next time you call “/authorize” the authorization_code returned is refreshed.<br>I have forked the react-native-azure-ad <strong><em><a href="https://github.com/mahesh8488/react-native-azure-ad" target="_blank" rel="noopener">here</a></em></strong>.</p><p>To use this version in your project, include below in you package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"react-native-azure-ad"</span>: <span class="string">"https://github.com/mahesh8488/react-native-azure-ad/archive/v1.0.tar.gz"</span>,</span><br></pre></td></tr></table></figure><h2 id="Explaining-my-code-changes"><a href="#Explaining-my-code-changes" class="headerlink" title="Explaining my code changes"></a>Explaining my code changes</h2><ol><li>Catch the Auth error<br> Look for “interaction_required” in the error message.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>._resourceForWhichAccessTokenIsFetchedByGet = err.resource;</span><br><span class="line">  <span class="keyword">if</span> (err.response.error.indexOf(<span class="string">"interaction_required"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">visible</span> : <span class="literal">true</span>&#125;)</span><br><span class="line">    <span class="keyword">this</span>._lock = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.props.onVisibilityChange &amp;&amp; <span class="keyword">this</span>.props.onVisibilityChange(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">page</span>: <span class="keyword">this</span>._getAcquireTokenPopupUrl(context.getConfig().tenant, err.resource, <span class="string">"token"</span>)&#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">_getAcquireTokenPopupUrl(tenant: string, <span class="attr">resource</span>: string, <span class="attr">response_type</span>: string): string &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>.props.context</span><br><span class="line">    <span class="keyword">let</span> redirect = context.getConfig().redirect_uri</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`https://login.microsoftonline.com/<span class="subst">$&#123;tenant&#125;</span>/oauth2/authorize?response_type=<span class="subst">$&#123;response_type&#125;</span>&amp;resource=<span class="subst">$&#123;resource&#125;</span>`</span> +</span><br><span class="line">      <span class="string">`&amp;client_id=<span class="subst">$&#123;context.getConfig().client_id&#125;</span>`</span> +</span><br><span class="line">      <span class="string">`&amp;scope=openid&amp;nonce=rnad-<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Modify the _handleADToken:</p><p> Look for “access_token”, redirect the page to Login. Now that we have fetched the correct access_token, authentication will not break for MFA as the code returned is refreshed.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">_handleADToken(e:&#123; <span class="attr">url</span>:string &#125;):any&#123;</span><br><span class="line">   log.verbose(<span class="string">'ADLoginView navigate to'</span>, e.url)</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>._lock)</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   <span class="keyword">let</span> code = <span class="regexp">/((\?|\&amp;)code\=)[^\&amp;]+/</span>.exec(e.url) </span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>._needRedirect) &#123;</span><br><span class="line">     <span class="comment">// this._needRedirect = false</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>.props.onURLChange) &#123;</span><br><span class="line">     <span class="keyword">this</span>.props.onURLChange(e)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (e.url.indexOf(<span class="string">"access_token"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">     <span class="keyword">this</span>.setState(&#123;<span class="attr">visible</span> : <span class="literal">true</span>&#125;)</span><br><span class="line">     <span class="keyword">this</span>.props.onVisibilityChange &amp;&amp; <span class="keyword">this</span>.props.onVisibilityChange(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Once access_token is fetched, go back to login, this time auth will go fine.</span></span><br><span class="line">     <span class="keyword">this</span>.setState(&#123;<span class="attr">page</span>: <span class="keyword">this</span>._getLoginUrl(<span class="keyword">this</span>.props.context.getConfig().tenant)&#125;);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>( code !== <span class="literal">null</span>)&#123;</span><br><span class="line">     <span class="keyword">this</span>._lock = <span class="literal">true</span></span><br><span class="line">     log.verbose(<span class="string">'ADLoginView._handleADToken code='</span>, code[<span class="number">0</span>])</span><br><span class="line">     code = <span class="built_in">String</span>(code[<span class="number">0</span>]).replace(<span class="regexp">/(\?|\&amp;)?code\=/</span>,<span class="string">''</span>)</span><br><span class="line">     <span class="keyword">this</span>.setState(&#123;<span class="attr">visible</span> : !<span class="keyword">this</span>.props.hideAfterLogin&#125;)</span><br><span class="line">     <span class="keyword">this</span>.props.onVisibilityChange &amp;&amp; <span class="keyword">this</span>.props.onVisibilityChange(<span class="literal">false</span>)</span><br><span class="line">     <span class="keyword">this</span>._getResourceAccessToken(code).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">       log.error(<span class="string">'ADLoginView._getResourceAccessToken'</span>, err)</span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Please comment if you found any alternate solutions !</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react-native-azure-ad is a library which makes azure active directory authentication simpler in React-Native apps. I recently found that 
      
    
    </summary>
    
    
      <category term="react-native azure-ad authentication Multi-factor-auth" scheme="http://mahesh8488.github.io/tags/react-native-azure-ad-authentication-Multi-factor-auth/"/>
    
  </entry>
  
  <entry>
    <title>Documentation and Live Editor for React Components in Typescript</title>
    <link href="http://mahesh8488.github.io/2018/04/21/Documentation-and-live-editor-for-React-Components-in-Typescript/"/>
    <id>http://mahesh8488.github.io/2018/04/21/Documentation-and-live-editor-for-React-Components-in-Typescript/</id>
    <published>2018-04-22T06:31:43.000Z</published>
    <updated>2018-08-01T23:34:09.804Z</updated>
    
    <content type="html"><![CDATA[<p>Its all really exciting to follow the Create-React-app and build your first React applicaiton in minutes. Once you get the taste of it, you start building multiple pages in no time. Then, you enter a phase where you want more people to reuse the components you have built. While promoting your components, you suddenly realize that you didnt give any attention to documentation.<br>    An easier solution, not only to get a documentation without any code changes to solution but also get a page that can act as a playground for others to try out your components, is <a href="https://github.com/reactjs/react-docgen" target="_blank" rel="noopener">React Docgen</a>. React Docgen hit 2 birds in one stone.</p><p>Below steps will guide you in creating a basic react app with documentation in typescript.</p><ul><li>Configure your <strong>package.json</strong> as shown below. You may not need many of the packages for a sample react component. But you may need those later.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"@types/react"</span>: <span class="string">"^16.3.12"</span>,</span><br><span class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^7.1.4"</span>,</span><br><span class="line">    <span class="string">"classnames"</span>: <span class="string">"^2.2.5"</span>,</span><br><span class="line">    <span class="string">"css-loader"</span>: <span class="string">"^0.28.11"</span>,</span><br><span class="line">    <span class="string">"glob"</span>: <span class="string">"^7.1.2"</span>,</span><br><span class="line">    <span class="string">"mobx"</span>: <span class="string">"^4.2.0"</span>,</span><br><span class="line">    <span class="string">"mobx-react"</span>: <span class="string">"^5.0.0"</span>,</span><br><span class="line">    <span class="string">"moment"</span>: <span class="string">"^2.22.1"</span>,</span><br><span class="line">    <span class="string">"path"</span>: <span class="string">"^0.12.7"</span>,</span><br><span class="line">    <span class="string">"prop-types"</span>: <span class="string">"^15.6.1"</span>,</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^16.3.2"</span>,</span><br><span class="line">    <span class="string">"react-docgen"</span>: <span class="string">"^2.20.1"</span>,</span><br><span class="line">    <span class="string">"react-docgen-typescript"</span>: <span class="string">"^1.3.0"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^16.3.2"</span>,</span><br><span class="line">    <span class="string">"react-styleguidist"</span>: <span class="string">"^7.0.8"</span>,</span><br><span class="line">    <span class="string">"style-loader"</span>: <span class="string">"^0.21.0"</span>,</span><br><span class="line">    <span class="string">"ts-loader"</span>: <span class="string">"^4.2.0"</span>,</span><br><span class="line">    <span class="string">"typescript"</span>: <span class="string">"^2.8.3"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^4.6.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Create a <strong><em>styleguide.config.js</em></strong> at the root level as shown below:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    components: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> glob.sync(path.resolve(__dirname, <span class="string">'components/*.tsx'</span>))</span><br><span class="line">          .filter(<span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/\/[A-Z]\w*\.tsx$/</span>.test(<span class="built_in">module</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    resolver: <span class="built_in">require</span>(<span class="string">'react-docgen'</span>).resolver.findAllComponentDefinitions,</span><br><span class="line">    propsParser: <span class="built_in">require</span>(<span class="string">'react-docgen-typescript'</span>).withDefaultConfig(&#123; <span class="attr">propFilter</span>: &#123; <span class="attr">skipPropsWithoutDoc</span>: <span class="literal">true</span> &#125; &#125;).parse,</span><br><span class="line">    webpackConfig: &#123;</span><br><span class="line">        <span class="built_in">module</span>: &#123;</span><br><span class="line">          rules: [</span><br><span class="line">            <span class="comment">// Babel loader, will use your project’s .babelrc</span></span><br><span class="line">            &#123;</span><br><span class="line">              test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">              exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">              loader: <span class="string">'babel-loader'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">                loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// Other loaders that are needed for your components</span></span><br><span class="line">            &#123;</span><br><span class="line">              test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">              <span class="comment">//loader: 'style-loader!css-loader?modules'</span></span><br><span class="line">              use: [</span><br><span class="line">                &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;,</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li><p>Add a simple component <strong><em>components/Column.tsx</em></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Column properties.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> interface IColumnProps extends React.HTMLAttributes&lt;any&gt; &#123;</span><br><span class="line">  <span class="comment">/** prop1 description */</span></span><br><span class="line">  prop1?: string;</span><br><span class="line">  <span class="comment">/** prop2 description */</span></span><br><span class="line">  prop2: number;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * prop3 description</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  prop3: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="comment">/** prop4 description */</span></span><br><span class="line">  prop4: <span class="string">'option1'</span> | <span class="string">'option2'</span> | <span class="string">'option3'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Form column.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Column</span> <span class="keyword">extends</span> <span class="title">Component</span>&lt;<span class="title">IColumnProps</span>, </span>&#123;&#125;&gt; &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;Column rendered&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Column;</span><br></pre></td></tr></table></figure></li><li><p>Add <strong><em>Column.md</em></strong></p></li></ul><pre><code>Column - component description```js&lt;Column prop1=&quot;test&quot; /&gt;</code></pre><ul><li><p>Run <strong><em>yarn</em></strong> to install the packages and then run the <strong><em>styleguidist</em></strong></p><p>  yarn<br>  npx styleguidist server</p></li></ul><p>This will serve the below output, which has 2 parts to it:</p><ol><li>Prop types declaration</li><li>Playground for your react component</li></ol><h3 id="1-Declaration"><a href="#1-Declaration" class="headerlink" title="1. Declaration"></a>1. Declaration</h3><p>As shown in Column.tsx, just adding comment above the prop results into out shown below:</p><pre><code>/** prop2 description */prop2: number;</code></pre><p><img src="https://github.com/mahesh8488/static-warehouse/blob/master/images/styleguidist-props.PNG?raw=true" alt="Styleguidist Props"></p><h3 id="2-Playground-for-your-React-components"><a href="#2-Playground-for-your-React-components" class="headerlink" title="2. Playground for your React components"></a>2. Playground for your React components</h3><p>Each component gets its own demo and live editor.</p><p><img src="https://github.com/mahesh8488/static-warehouse/blob/master/images/styleguidist-code.PNG?raw=true" alt="Styleguidist Props"></p><p>Using ReactDocgen you can create a platform that makes your code readable and reusable. <a href="https://github.com/mahesh8488/react-doc-gen-typescript" target="_blank" rel="noopener">Here</a> is the github link for sample project I created.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Its all really exciting to follow the Create-React-app and build your first React applicaiton in minutes. Once you get the taste of it, y
      
    
    </summary>
    
    
      <category term="ReactJS Typescript Documentation" scheme="http://mahesh8488.github.io/tags/ReactJS-Typescript-Documentation/"/>
    
  </entry>
  
  <entry>
    <title>Push notifications using Expo</title>
    <link href="http://mahesh8488.github.io/2018/02/09/Push-notifications-using-Expo/"/>
    <id>http://mahesh8488.github.io/2018/02/09/Push-notifications-using-Expo/</id>
    <published>2018-02-10T01:40:17.000Z</published>
    <updated>2018-08-01T23:34:09.805Z</updated>
    
    <content type="html"><![CDATA[<p>There are several options for push notifications. EXPO’s push notification is simple to use. </p><ol><li>Register the push token in your app.</li></ol><p>Use an endpoint on your servers to save the push token.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Permissions, Notifications &#125; from &apos;expo&apos;;</span><br><span class="line"></span><br><span class="line">const PUSH_ENDPOINT = &apos;https://your-server.com/users/push-token&apos;;</span><br><span class="line"></span><br><span class="line">async function registerForPushNotificationsAsync() &#123;</span><br><span class="line">  const &#123; status: existingStatus &#125; = await Permissions.getAsync(</span><br><span class="line">    Permissions.NOTIFICATIONS</span><br><span class="line">  );</span><br><span class="line">  let finalStatus = existingStatus;</span><br><span class="line"></span><br><span class="line">  // only ask if permissions have not already been determined, because</span><br><span class="line">  // iOS won&apos;t necessarily prompt the user a second time.</span><br><span class="line">  if (existingStatus !== &apos;granted&apos;) &#123;</span><br><span class="line">    // Android remote notification permissions are granted during the app</span><br><span class="line">    // install, so this will only ask on iOS</span><br><span class="line">    const &#123; status &#125; = await Permissions.askAsync(Permissions.NOTIFICATIONS);</span><br><span class="line">    finalStatus = status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Stop here if the user did not grant permissions</span><br><span class="line">  if (finalStatus !== &apos;granted&apos;) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Get the token that uniquely identifies this device</span><br><span class="line">  let token = await Notifications.getExpoPushTokenAsync();</span><br><span class="line"></span><br><span class="line">  // POST the token to your backend server from where you can retrieve it to send push notifications.</span><br><span class="line">  return fetch(PUSH_ENDPOINT, &#123;</span><br><span class="line">    method: &apos;POST&apos;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      Accept: &apos;application/json&apos;,</span><br><span class="line">      &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class="line">    &#125;,</span><br><span class="line">    body: JSON.stringify(&#123;</span><br><span class="line">      token: &#123;</span><br><span class="line">        value: token,</span><br><span class="line">      &#125;,</span><br><span class="line">      user: &#123;</span><br><span class="line">        username: &apos;Brent&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Send push notification</li></ol><p>You probably will end up writing another job or application to make a web request to the push token similar to this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -H &quot;Content-Type: application/json&quot; -X POST https://exp.host/--/api/v2/push/send -d &apos;&#123;</span><br><span class="line">  &quot;to&quot;: &quot;ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]&quot;,</span><br><span class="line">  &quot;title&quot;:&quot;hello&quot;,</span><br><span class="line">  &quot;body&quot;: &quot;world&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><p>EXPO’s push notifications are absolutely free of cost and don’t require you to sign up for anything.</p><p>For more details: Click <a href="https://docs.expo.io/versions/latest/guides/push-notifications.html" target="_blank" rel="noopener">here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There are several options for push notifications. EXPO’s push notification is simple to use. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Register the push token in you
      
    
    </summary>
    
    
      <category term="Expo.IO PushNotification" scheme="http://mahesh8488.github.io/tags/Expo-IO-PushNotification/"/>
    
  </entry>
  
  <entry>
    <title>Azure AD authentication in React-Native App</title>
    <link href="http://mahesh8488.github.io/2018/02/08/Azure-AD-authentication-in-React-Native-App/"/>
    <id>http://mahesh8488.github.io/2018/02/08/Azure-AD-authentication-in-React-Native-App/</id>
    <published>2018-02-08T19:06:38.000Z</published>
    <updated>2018-08-01T23:34:09.803Z</updated>
    
    <content type="html"><![CDATA[<p>Our requirement was to enable Azure Active Directory authentication for the App. After exploring some options, I found that a library is already available <a href="https://github.com/wkh237/react-native-azure-ad" target="_blank" rel="noopener">react-native-azure-ad</a>.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Install package from <code>npm</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save react-native-azure-ad</span><br></pre></td></tr></table></figure><h2 id="Usage-Example"><a href="#Usage-Example" class="headerlink" title="Usage Example"></a>Usage Example</h2><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><p>The following example will show an Azure authorize page in your app, when user successfully logged in, it triggers <code>onSuccess</code> method.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;ReactNativeAD, ADLoginView&#125; <span class="keyword">from</span> <span class="string">'react-native-azure-ad'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CLIENT_ID = <span class="string">'xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LandingView</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.AzureADContext = &#123;</span><br><span class="line">      client_id : CLIENT_ID,</span><br><span class="line">      <span class="comment">// Optional</span></span><br><span class="line">      redirectUrl : <span class="string">'http://localhost:8080'</span>,  </span><br><span class="line">      <span class="comment">// Optional</span></span><br><span class="line">      authority_host : <span class="string">'https://login.microsoftonline.com/common/oauth2/authorize'</span>,</span><br><span class="line">      <span class="comment">// Optional</span></span><br><span class="line">      tenant  : <span class="string">'common'</span>,  </span><br><span class="line">      <span class="comment">// Optional</span></span><br><span class="line">      prompt : <span class="string">'none'</span>,</span><br><span class="line">      <span class="comment">// This is required if client_id is a web application id</span></span><br><span class="line">      <span class="comment">// but not recommended doing this way.</span></span><br><span class="line">      client_secret : <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>,</span><br><span class="line">      resources : [</span><br><span class="line">        <span class="string">'https://graph.microsoft.com'</span>,</span><br><span class="line">        <span class="string">'https://outlook.office365.com'</span>,</span><br><span class="line">        <span class="comment">// ... more resources</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> ReactNativeAD(&#123;</span><br><span class="line">    client_id: CLIENT_ID,</span><br><span class="line">    resources: [</span><br><span class="line">      <span class="string">'https://outlook.office365.com'</span></span><br><span class="line">    ]&#125;)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> &lt;ADLoginView</span><br><span class="line">              context=&#123;ReactNativeAD.getContext(CLIENT_ID)&#125;</span><br><span class="line">              onSuccess=&#123;this.onLoginSuccess.bind(this)&#125;/&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onLoginSuccess(credentials) &#123;</span><br><span class="line">    console.log(credentials[https://outlook.office365.com].access_token)</span><br><span class="line">    // use the access token ..</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Refresh-Token"><a href="#Refresh-Token" class="headerlink" title="Refresh Token"></a>Refresh Token</h3><p>To make all the API calls use the assureToken method to get token and use it in FETCH calls.</p><p>Use <code>assureToken</code> method to assure <code>access_token</code> of specific resource is valid, when access token is expired, this method will attempt to refresh access token automatically and resolve renewed access token in promise. If it failed to renew the token, the access token in promise will be <code>undefined</code>, it means user may have to login again, so you might have to redirect user to ADLoginView for new authorization.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ReactNativeAD.getContext(CLIENT_ID).assureToken(RESOURCE_ID).then((token) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"> // use token ..</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>For more details on this: Refer <a href="https://github.com/wkh237/react-native-azure-ad/blob/master/README.md" target="_blank" rel="noopener">https://github.com/wkh237/react-native-azure-ad/blob/master/README.md</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Our requirement was to enable Azure Active Directory authentication for the App. After exploring some options, I found that a library is 
      
    
    </summary>
    
    
      <category term="AzureAD React-Native" scheme="http://mahesh8488.github.io/tags/AzureAD-React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Building a React Native app (IOS/Andrioid) using Expo on a windows machine</title>
    <link href="http://mahesh8488.github.io/2018/02/06/Building-a-React-Native-app-IOS-Andrioid-using-Expo-on-a-windows-machine/"/>
    <id>http://mahesh8488.github.io/2018/02/06/Building-a-React-Native-app-IOS-Andrioid-using-Expo-on-a-windows-machine/</id>
    <published>2018-02-07T00:01:09.000Z</published>
    <updated>2018-08-01T23:34:09.803Z</updated>
    
    <content type="html"><![CDATA[<p>Some of the interesting dilemmas many developers and teams face while building a mobile application are:</p><ol><li>What technology stack to use ?</li><li>Should we have 2 seperate stacks for android vs ios app ?</li><li>Should we invest in building a cross platform app and thus enable sharing some code across ?</li><li>Do the existing cross platform frameworks support all my needs ?</li><li>If I am building an enterprise app, will I be able to authenticate using Active directory ?</li></ol><p>My needs were simple:</p><ol><li>I want to able to build a IOS and ANDRIOD app.</li><li>I should be able to authenticate users using the Azure Active directory.</li><li>and ofcourse, I wanted to do this without needing a MAC.</li><li>My app mostly had some workflows for which I had APIs. These APIs were mostly the same one which my Website uses.</li><li>Push notifications.</li></ol><p>I am blogging as I am learning these features one by one.</p><h1 id="Start"><a href="#Start" class="headerlink" title="Start:"></a>Start:</h1><ul><li>Download Expo Client on your phone:</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://github.com/mahesh8488/mahesh8488.github.io/blob/master/images/expoClient.PNG?raw=true" alt="Expo XDE"></p><ul><li>Install Expo XDE:   Download <a href="https://github.com/expo/xde/releases" target="_blank" rel="noopener">here</a></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://github.com/mahesh8488/mahesh8488.github.io/blob/master/images/expoXde.PNG?raw=true" alt="Expo XDE"></p><ul><li>Create a new project</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://github.com/mahesh8488/mahesh8488.github.io/blob/master/images/newProject.PNG?raw=true" alt="Expo XDE"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://github.com/mahesh8488/mahesh8488.github.io/blob/master/images/newProject2.PNG?raw=true" alt="Expo XDE"></p><ul><li>Expo starts a new tunnel. Scan the QR code or copy the tunnel link to load the newly created APP on your phone.</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://github.com/mahesh8488/mahesh8488.github.io/blob/master/images/appInit.PNG?raw=true" alt="Expo XDE"></p><h2 id="Building-and-deploying"><a href="#Building-and-deploying" class="headerlink" title="Building and deploying"></a>Building and deploying</h2><p>You can use any texteditors such as NotePad++ to edit the react-native project created by Expo.<br>Once the app is loading on your phone, building and deploying is easy. Just save the changes made to the code and the App refreshes automatically.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://github.com/mahesh8488/mahesh8488.github.io/blob/master/images/phoneApp.jpg?raw=true" alt="Expo XDE"></p><hr><hr><p>Coming up next: <strong>Authentication, Tabs, Push Notification, Publishing App</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Some of the interesting dilemmas many developers and teams face while building a mobile application are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What technology sta
      
    
    </summary>
    
    
      <category term="React-Native Expo.IO" scheme="http://mahesh8488.github.io/tags/React-Native-Expo-IO/"/>
    
  </entry>
  
</feed>
